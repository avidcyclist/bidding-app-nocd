# Bidding App (Like eBay)

## Overview
This is a bidding platform where users can:
1. Create listings with a title, description, starting price, end time, and optional image.
2. Place bids on active listings â€” the highest bid always wins.
3. See the current highest bid and bidding history.
4. Get notified (via text reminder):
   - Sellers get notified on every new bid.
   - Bidders get notified when they are outbid or win.
5. Upload an image and auto-generate a listing using AI.

## Tech Stack
- **Backend**: Python + Flask
- **Database**: MySQL
- **Frontend**: Retool
- **Cloud Services**: AWS (S3 for image storage)
- **AI Integration**: Gemini API for auto-generating listings

## Features
- AI-powered listing generation.
- Real-time bid updates.
- Notifications for sellers and bidders.
- Secure user authentication with JWT.

## Setup Instructions
1. Clone the repository:
   ```bash
   git clone https://github.com/your-username/bidding-app.git
   cd bidding-app



## Environment Variables
The following environment variables need to be set:

- `GEMINI_API_KEY`: Your Gemini API key for AI-powered listing generation.
- `S3_BUCKET`: The name of your S3 bucket for storing images.
- `S3_REGION`: The AWS region of your S3 bucket.
- `SECRET_KEY`: The secret key for Flask (used for JWT authentication).
- `SQLALCHEMY_DATABASE_URI`: The database connection string.
- `TWILIO_ACCOUNT_SID`: Twilio account SID for sending SMS notifications.
- `TWILIO_AUTH_TOKEN`: Twilio authentication token.
- `TWILIO_PHONE_NUMBER`: Twilio phone number for sending SMS.
- 'AWS_ACCESS_KEY_ID' : Used for beanstalk/s3/amazon services
- 'AWS_SECRET_ACCESS_KEY' : Used for beanstalk/s3/amazon services
